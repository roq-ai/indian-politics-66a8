generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model guest {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  search_history  String?
  viewed_profiles String?
  user_id         String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_assessment {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  performance_score Int
  demand_score      Int
  assessment_date   DateTime   @db.Date
  politician_id     String     @db.Uuid
  created_at        DateTime   @default(now()) @db.Timestamp(6)
  updated_at        DateTime   @default(now()) @db.Timestamp(6)
  politician        politician @relation(fields: [politician_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model politician {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  biography              String
  current_position       String                   @db.VarChar(255)
  work_process           String
  user_id                String                   @db.Uuid
  created_at             DateTime                 @default(now()) @db.Timestamp(6)
  updated_at             DateTime                 @default(now()) @db.Timestamp(6)
  performance_assessment performance_assessment[]
  user                   user                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  profile_usage          profile_usage[]
}

model profile_usage {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  daily_usage   Int
  weekly_usage  Int
  monthly_usage Int
  politician_id String     @db.Uuid
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @default(now()) @db.Timestamp(6)
  politician    politician @relation(fields: [politician_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  guest        guest[]
  organization organization[]
  politician   politician[]
}
